/*
 * gigsl-matrix-@ABBR_CTYPE@.c
 * This file is part of libggsl
 *
 * Copyright (C) 2013 - Emanuel Schmidt
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 */

#ifdef HAVE_CONFIG_H
  #include <config.h>
#endif

#include "gigsl-matrix-@ABBR_CTYPE@.h"
#include <string.h>

static GslMatrix@GLIB_STRUCT_AFFIX@ *
gsl_matrix@GSLAFFIX@_copy (GslMatrix@GLIB_STRUCT_AFFIX@ *matrix)
{
  GslMatrix@GLIB_STRUCT_AFFIX@ * result;

  result =
    gsl_matrix@GSLAFFIX@_alloc(matrix->size1, matrix->size2);
  gsl_matrix@GSLAFFIX@_memcpy(result, matrix);

  return result;
}

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
G_DEFINE_BOXED_TYPE (GslMatrix@GLIB_STRUCT_AFFIX@,
                     gsl_matrix@GSLAFFIX@,
                     gsl_matrix@GSLAFFIX@_copy,
                     (void (*)(GslMatrix@GLIB_STRUCT_AFFIX@ *)) gsl_matrix@GSLAFFIX@_free);
#pragma GCC diagnostic pop

GslMatrix@GLIB_STRUCT_AFFIX@ * gsl_matrix@GSLAFFIX@_set_and_expand (GslMatrix@GLIB_STRUCT_AFFIX@ *matrix,
                                        gssize i, gssize j,
                                        @CTYPE@ x)
{
  if (i < 0)
    gsl_matrix@GSLAFFIX@_set_cols (matrix, j);
  else if ((gsize) i >= matrix->size1)
    gsl_matrix@GSLAFFIX@_set_rows (matrix, i + 1);

  if (j < 0)
    gsl_matrix@GSLAFFIX@_set_cols (matrix, j);
  else if ((gsize) j >= matrix->size2)
    gsl_matrix@GSLAFFIX@_set_cols (matrix, j + 1);

  if (i < 0)
    i = 0;
  if (j < 0)
    j = 0;

  gsl_matrix@GSLAFFIX@_set(matrix, i, j, x);

  /* TODO */
  return matrix;
}

void gsl_matrix@GSLAFFIX@_set_rows (GslMatrix@GLIB_STRUCT_AFFIX@ *matrix, gssize rows)
{
  GslMatrix@GLIB_STRUCT_AFFIX@ tmp_matrix;
  GslMatrix@GLIB_STRUCT_AFFIX@ * new_matrix;

  if (rows > 0 && matrix->size1 == (gsize) rows)
    return;

  tmp_matrix = *matrix;
  new_matrix = gsl_matrix@GSLAFFIX@_calloc(rows, matrix->size2);

  /* TODO: Implement this case! */
  g_return_if_fail(rows > 0);

  if (new_matrix == NULL)
    return;

  for (gsize i = 0; i < (gsize) rows && i < matrix->size1; i++)
  {
    for (gsize j = 0; j < matrix->size2; j++)
    {
      @CTYPE@ value = gsl_matrix@GSLAFFIX@_get(matrix, i, j);
      gsl_matrix@GSLAFFIX@_set(new_matrix, i, j, value);
    }
  }

  *matrix = *new_matrix;
  *new_matrix = tmp_matrix;
  gsl_matrix@GSLAFFIX@_free(new_matrix);
}

void gsl_matrix@GSLAFFIX@_set_cols (GslMatrix@GLIB_STRUCT_AFFIX@ *matrix,
                                    gssize columns)
{
  GslMatrix@GLIB_STRUCT_AFFIX@ tmp_matrix;
  GslMatrix@GLIB_STRUCT_AFFIX@ * new_matrix;

  if (columns > 0 && matrix->size2 == (gsize) columns)
    return;

  tmp_matrix = *matrix;
  new_matrix = gsl_matrix@GSLAFFIX@_calloc(matrix->size1, columns);

  /* TODO: Implement this case! */
  g_return_if_fail(columns > 0);

  if (new_matrix == NULL)
    return;

  for (gsize i = 0; i < matrix->size1; i++)
  {
    for (gsize j = 0; j < (gsize) columns && j < matrix->size2; j++)
    {
      @CTYPE@ value = gsl_matrix@GSLAFFIX@_get(matrix, i, j);
      gsl_matrix@GSLAFFIX@_set(new_matrix, i, j, value);
    }
  }

  *matrix = *new_matrix;
  *new_matrix = tmp_matrix;
  gsl_matrix@GSLAFFIX@_free(new_matrix);
}

/*
void gsl_matrix@GSLAFFIX@_set_rows (GslMatrix@GLIB_STRUCT_AFFIX@ *matrix, gsize rows)
{
  gsize real_new_size = matrix->size2 * rows * sizeof (@CTYPE@); //  * MULTIPLICITY

  matrix->block->data = realloc(matrix->block, real_new_size);
  matrix->data = matrix->block->data;
  matrix->size1 = rows;
}

void gsl_matrix@GSLAFFIX@_set_cols (GslMatrix@GLIB_STRUCT_AFFIX@ *matrix,
                                    gsize columns)
{
  GslMatrix@GLIB_STRUCT_AFFIX@ tmp_matrix = *matrix;
  gsize delta = matrix->size2 > columns ? matrix->size2 - columns : 0;
  gsize real_new_size = matrix->size1 * columns * sizeof (@CTYPE@); //  * MULTIPLICITY

  if (matrix->size2 == columns)
    return;
  else if (matrix->size2 < columns)
  {
    matrix->block->data = realloc(matrix->block, real_new_size);
    matrix->data = matrix->block->data;
  }

  if (matrix->block == NULL)
    return;

  matrix->size2 = columns;
  matrix->tda = columns;

  for (gsize j = 1; j <= tmp_matrix.size2 && j < matrix->size2; j++)
  {
    for (gsize i = 1; i <= tmp_matrix.size1; i++)
    {
      @CTYPE@ value = gsl_matrix@GSLAFFIX@_get(&tmp_matrix,
                                               tmp_matrix.size1 - i,
                                               tmp_matrix.size2 - j - delta);
      gsl_matrix@GSLAFFIX@_set(matrix,
                               matrix->size1 - i,
                               matrix->size2 - j,
                               value);
    }
  }

  if (matrix->size2 > columns)
  {
    matrix->block->data = realloc(matrix->block, real_new_size);
    matrix->data = matrix->block->data;
  }
}
*/

